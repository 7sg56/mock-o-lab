import React, { useState, useRef, useEffect } from 'react';
import axios from "axios";
// Using dotenv for environment variables instead of config file

const App = () => {
  const [logoPrompt, setLogoPrompt] = useState('');
  const [industryType, setIndustryType] = useState('');
  const [style, setStyle] = useState('modern');
  const [colorScheme, setColorScheme] = useState('blue');
  const [isLoading, setIsLoading] = useState(false);
  const [generatedLogos, setGeneratedLogos] = useState([]);
  
  // Background Remover States
  const [originalImage, setOriginalImage] = useState(null);
  const [processedImage, setProcessedImage] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [apiKeyLoaded, setApiKeyLoaded] = useState(false);
  const fileInputRef = useRef(null);

  // Load API key from environment variables on component mount
  useEffect(() => {
    const removeBgApiKey = import.meta.env.VITE_REMOVE_BG_API_KEY;
    if (removeBgApiKey) {
      setApiKeyLoaded(true);
    } else {
      console.warn("Remove.bg API key not found in environment variables");
    }
  }, []);

  // Industry options
  const industries = [
    'Technology', 'Finance', 'Healthcare', 'Education', 
    'Food & Beverage', 'Real Estate', 'Entertainment', 
    'Fitness', 'E-commerce', 'Manufacturing'
  ];

  // Style options
  const styles = [
    { value: 'modern', label: 'Modern' },
    { value: 'minimalist', label: 'Minimalist' },
    { value: 'vintage', label: 'Vintage' },
    { value: 'bold', label: 'Bold' },
    { value: 'playful', label: 'Playful' },
    { value: 'luxury', label: 'Luxury' },
  ];

  // Color scheme options
  const colorSchemes = [
    { value: 'blue', label: 'Blue Tones', colors: ['#1e3a8a', '#3b82f6', '#93c5fd'] },
    { value: 'green', label: 'Green Tones', colors: ['#065f46', '#10b981', '#a7f3d0'] },
    { value: 'purple', label: 'Purple Tones', colors: ['#5b21b6', '#8b5cf6', '#c4b5fd'] },
    { value: 'red', label: 'Red Tones', colors: ['#991b1b', '#ef4444', '#fca5a5'] },
    { value: 'neutral', label: 'Neutral Tones', colors: ['#1f2937', '#6b7280', '#e5e7eb'] },
  ];

  // Sample placeholder logos (in a real app, these would be generated by the API)
  const placeholderLogos = [
    '/api/placeholder/180/180',
    '/api/placeholder/180/180',
    '/api/placeholder/180/180',
    '/api/placeholder/180/180',
  ];

  const handleGenerateLogos = (e) => {
    e.preventDefault();
    setIsLoading(true);
    
    // Simulate API call with a delay
    setTimeout(() => {
      setGeneratedLogos(placeholderLogos);
      setIsLoading(false);
    }, 1500);
  };

  // Background Remover Functions
  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragging(false);
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      processFile(files[0]);
    }
  };

  const handleFileSelect = (e) => {
    if (e.target.files.length > 0) {
      processFile(e.target.files[0]);
    }
  };

  const processFile = (file) => {
    setErrorMessage('');
    setProcessedImage(null);
    
    if (!file.type.match('image.*')) {
      setErrorMessage('Please select an image file (PNG, JPG, JPEG, etc.)');
      return;
    }
    
    const reader = new FileReader();
    reader.onload = (e) => {
      setOriginalImage(e.target.result);
      if (apiKeyLoaded) {
        removeBackground(file);
      } else {
        setErrorMessage('API key not configured. Please check your .env file.');
      }
    };
    reader.readAsDataURL(file);
  };
  
  const removeBackground = async (file) => {
    setIsProcessing(true);
  
    try {
      const formData = new FormData();
      formData.append("size", "auto");
      formData.append("image_file", file);
  
      const response = await axios.post("https://api.remove.bg/v1.0/removebg", formData, {
        headers: {
          "X-Api-Key": import.meta.env.VITE_REMOVE_BG_API_KEY,
          "Content-Type": "multipart/form-data",
        },
        responseType: "arraybuffer",
      });
  
      const base64 = btoa(
        new Uint8Array(response.data).reduce((data, byte) => data + String.fromCharCode(byte), "")
      );
  
      setProcessedImage(`data:image/png;base64,${base64}`);
    } catch (error) {
      const errorMessage = error.response?.data?.errors?.[0]?.title || `${error.response?.status}: ${error.response?.statusText}`;
      setErrorMessage(`Error removing background: ${errorMessage}`);
    } finally {
      setIsProcessing(false);
    }
  };

  const downloadImage = () => {
    const link = document.createElement('a');
    link.href = processedImage;
    link.download = 'removed-background.png';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const triggerFileInput = () => {
    fileInputRef.current.click();
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8 flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <div className="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
              <span className="text-white font-bold text-lg">L</span>
            </div>
            <h1 className="text-2xl font-bold text-gray-900">LogoAI</h1>
          </div>
          <nav className="hidden md:flex space-x-8">
            <a href="#" className="text-gray-900 hover:text-blue-600 font-medium">Home</a>
            <a href="#" className="text-gray-500 hover:text-blue-600 font-medium">Templates</a>
            <a href="#" className="text-gray-500 hover:text-blue-600 font-medium">Pricing</a>
            <a href="#" className="text-gray-500 hover:text-blue-600 font-medium">Examples</a>
          </nav>
          <div className="flex items-center space-x-4">
            <button className="hidden md:block px-4 py-2 border border-transparent text-sm font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200">
              Sign In
            </button>
            <button className="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
              Get Started
            </button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 py-16 sm:px-6 lg:px-8">
          <div className="text-center">
            <h2 className="text-4xl font-extrabold text-gray-900 sm:text-5xl">
              Create a stunning logo in seconds
            </h2>
            <p className="mt-4 text-xl text-gray-600 max-w-2xl mx-auto"> 
              Generate unique, professional logos with the power of AI. 
              Perfect for startups, small businesses, and personal brands.
            </p>
          </div>
        </div>
      </section>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 py-12 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
          {/* Logo Generation Form */}
          <div className="lg:col-span-4 bg-white p-6 rounded-lg shadow-sm">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Design your logo</h3>
            <form onSubmit={handleGenerateLogos}>
              <div className="space-y-6">
                <div>
                  <label htmlFor="logoPrompt" className="block text-sm font-medium text-gray-700">
                    Describe your logo
                  </label>
                  <textarea
                    id="logoPrompt"
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 text-sm"
                    rows="3"
                    placeholder="e.g., A modern tech company focused on AI solutions"
                    value={logoPrompt}
                    onChange={(e) => setLogoPrompt(e.target.value)}
                    required
                  />
                </div>
                
                <div>
                  <label htmlFor="industry" className="block text-sm font-medium text-gray-700">
                    Industry
                  </label>
                  <select
                    id="industry"
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 text-sm"
                    value={industryType}
                    onChange={(e) => setIndustryType(e.target.value)}
                  >
                    <option value="">Select industry</option>
                    {industries.map((industry) => (
                      <option key={industry} value={industry.toLowerCase()}>
                        {industry}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">
                    Style
                  </label>
                  <div className="mt-2 grid grid-cols-3 gap-2">
                    {styles.map((styleOption) => (
                      <button
                        key={styleOption.value}
                        type="button"
                        className={`py-2 px-3 text-sm font-medium rounded-md ${
                          style === styleOption.value
                            ? 'bg-blue-100 text-blue-700 border-blue-500 border'
                            : 'bg-white text-gray-700 border-gray-300 border hover:bg-gray-50'
                        }`}
                        onClick={() => setStyle(styleOption.value)}
                      >
                        {styleOption.label}
                      </button>
                    ))}
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">
                    Color Scheme
                  </label>
                  <div className="mt-2 grid grid-cols-1 gap-2">
                    {colorSchemes.map((scheme) => (
                      <button
                        key={scheme.value}
                        type="button"
                        className={`py-2 px-3 text-sm font-medium rounded-md flex items-center ${
                          colorScheme === scheme.value
                            ? 'bg-blue-50 border-blue-500 border'
                            : 'bg-white border-gray-300 border hover:bg-gray-50'
                        }`}
                        onClick={() => setColorScheme(scheme.value)}
                      >
                        <span className="mr-2">{scheme.label}</span>
                        <div className="flex">
                          {scheme.colors.map((color, index) => (
                            <div
                              key={index}
                              className="w-4 h-4 rounded-full border border-gray-200"
                              style={{ backgroundColor: color, marginLeft: index > 0 ? '-2px' : '0' }}
                            />
                          ))}
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
                
                <button
                  type="submit"
                  className={`w-full py-3 px-4 flex justify-center items-center text-white font-medium rounded-md ${
                    isLoading
                      ? 'bg-blue-400 cursor-not-allowed'
                      : 'bg-blue-600 hover:bg-blue-700'
                  }`}
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Generating...
                    </>
                  ) : (
                    'Generate Logos'
                  )}
                </button>
              </div>
            </form>
          </div>
          
          {/* Results Area with Background Remover Integration */}
          <div className="lg:col-span-8">
            {/* Background Remover Section */}
            <div className="bg-white p-6 rounded-lg shadow-sm mb-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Remove Image Background</h3>
              <p className="text-gray-600 mb-4">Upload an image to automatically remove its background. Perfect for logos and product images.</p>
              
              {!apiKeyLoaded && (
                <div className="mb-6 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                  <h4 className="text-md font-medium mb-2 text-yellow-800">API Key Not Configured</h4>
                  <p className="text-sm text-yellow-700">
                    Please add your remove.bg API key to the .env file as REACT_APP_REMOVE_BG_API_KEY.
                  </p>
                </div>
              )}

              <div
                className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors cursor-pointer ${
                  isDragging ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-400 bg-gray-50'
                }`}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
                onClick={triggerFileInput}
              >
                <input
                  type="file"
                  ref={fileInputRef}
                  className="hidden"
                  accept="image/*"
                  onChange={handleFileSelect}
                />
                <div className="flex flex-col items-center justify-center">
                  <svg
                    className="w-12 h-12 text-blue-500 mb-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
                    />
                  </svg>
                  <p className="mb-2 text-sm text-gray-700">
                    <span className="font-semibold">Click to upload</span> or drag and drop
                  </p>
                  <p className="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
                </div>
              </div>

              {errorMessage && (
                <div className="bg-red-50 border-l-4 border-red-500 text-red-700 p-4 mt-4" role="alert">
                  <p>{errorMessage}</p>
                </div>
              )}

              {originalImage && (
                <div className="mt-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                      <h2 className="text-md font-medium mb-2 text-gray-800">Original Image</h2>
                      <div className="bg-white rounded-lg overflow-hidden">
                        <img src={originalImage} alt="Original" className="max-w-full h-auto mx-auto" />
                      </div>
                    </div>

                    <div className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                      <h2 className="text-md font-medium mb-2 text-gray-800">Processed Image</h2>
                      <div className="bg-white rounded-lg overflow-hidden flex items-center justify-center" style={{ minHeight: '200px' }}>
                        {isProcessing ? (
                          <div className="text-center py-8">
                            <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mb-2"></div>
                            <p className="text-gray-500">Removing background...</p>
                          </div>
                        ) : processedImage ? (
                          <div className="bg-gray-100 rounded-lg overflow-hidden w-full h-full">
                            <img
                              src={processedImage}
                              alt="Processed"
                              className="max-w-full h-auto mx-auto"
                            />
                          </div>
                        ) : (
                          <p className="text-gray-500">
                            {apiKeyLoaded ? "Processing will appear here" : "Configure API key to process image"}
                          </p>
                        )}
                      </div>
                    </div>
                  </div>

                  {processedImage && !isProcessing && (
                    <div className="mt-6 text-center">
                      <button
                        onClick={downloadImage}
                        className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-lg transition-colors"
                      >
                        Download Image
                      </button>
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Generated Logos Section */}
            {generatedLogos.length > 0 && (
              <div className="bg-white p-6 rounded-lg shadow-sm">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-medium text-gray-900">Your generated logos</h3>
                  <div className="flex space-x-2">
                    <button className="px-3 py-1 text-sm text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50">
                      Regenerate
                    </button>
                    <button className="px-3 py-1 text-sm text-white bg-blue-600 border border-blue-600 rounded-md hover:bg-blue-700">
                      Download All
                    </button>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
                  {generatedLogos.map((logo, index) => (
                    <div key={index} className="bg-gray-50 border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow duration-200">
                      <img
                        src={logo}
                        alt={`Generated logo option ${index + 1}`}
                        className="w-full h-auto"
                      />
                      <div className="flex justify-between mt-3">
                        <button className="text-sm text-gray-600 hover:text-blue-600">
                          Edit
                        </button>
                        <button className="text-sm text-gray-600 hover:text-blue-600">
                          Download
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </main>

      {/* Features Section */}
      <section className="bg-gray-50 py-16 mt-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900">Why choose LogoAI?</h2>
            <p className="mt-4 text-lg text-gray-600 max-w-2xl mx-auto">
              Our AI-powered logo generator creates unique designs based on your preferences.
            </p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8">
            <div className="bg-white p-6 rounded-lg shadow-sm">
              <div className="w-12 h-12 bg-blue-100 text-blue-600 rounded-lg flex items-center justify-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z" />
                </svg>
              </div>
              <h3 className="text-xl font-medium text-gray-900 mb-2">Fast & Effortless</h3>
              <p className="text-gray-600">
                Generate multiple logo options in seconds, no design skills required.
              </p>
            </div>
            
            <div className="bg-white p-6 rounded-lg shadow-sm">
              <div className="w-12 h-12 bg-blue-100 text-blue-600 rounded-lg flex items-center justify-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M9.53 16.122a3 3 0 00-5.78 1.128 2.25 2.25 0 01-2.4 2.245 4.5 4.5 0 008.4-2.245c0-.399-.078-.78-.22-1.128zm0 0a15.998 15.998 0 003.388-1.62m-5.043-.025a15.994 15.994 0 011.622-3.395m3.42 3.42a15.995 15.995 0 004.764-4.648l3.876-5.814a1.151 1.151 0 00-1.597-1.597L14.146 6.32a15.996 15.996 0 00-4.649 4.763m3.42 3.42a6.776 6.776 0 00-3.42-3.42" />
                </svg>
              </div>
              <h3 className="text-xl font-medium text-gray-900 mb-2">Customizable</h3>
              <p className="text-gray-600">
                Fine-tune colors, styles, and layouts to match your brand identity.
              </p>
            </div>
            
            <div className="bg-white p-6 rounded-lg shadow-sm">
              <div className="w-12 h-12 bg-blue-100 text-blue-600 rounded-lg flex items-center justify-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" />
                </svg>
              </div>
              <h3 className="text-xl font-medium text-gray-900 mb-2">Ready to Use</h3>
              <p className="text-gray-600">
                Download your logo in multiple formats for web, print, and social media.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Footer (abbreviated) */}
      <footer className="bg-gray-800 text-gray-300 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="mt-8 border-t border-gray-700 pt-8 flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">L</span>
              </div>
              <span className="text-white font-bold">LogoAI</span>
            </div>
            <p className="text-sm">© 2025 LogoAI. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default App;